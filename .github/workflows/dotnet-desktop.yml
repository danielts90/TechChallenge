name: SonarCloud

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: self-hosted    
    env:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: 102030
      POSTGRES_DB: testdb
      
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Compose
        run: |
          echo "version: '3.8'
          services:
            db:
              image: postgres:latest
              environment:
                POSTGRES_USER: ${POSTGRES_USER}
                POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                POSTGRES_DB: ${POSTGRES_DB}
              ports:
                - '5432:5432'" > docker-compose.yml
                
      - name: Start database
        run: docker-compose up -d

      - name: Wait for Postgres on Linux
        if: runner.os == 'Linux'
        run: |
          echo "Waiting for Postgres to be ready..."
          for i in {1..30}; do
            if docker exec $(docker-compose ps -q db) pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; then
              echo "Postgres is ready!"
              exit 0
            fi
            echo "Waiting..."
            sleep 2
          done
          echo "Postgres did not become ready in time!"
          exit 1
        shell: bash

      - name: Wait for Postgres on Windows
        if: runner.os == 'Windows'
        run: |
          Write-Output "Waiting for Postgres to be ready..."
          for ($i = 1; $i -le 30; $i++) {
              $dbContainer = docker-compose ps -q db
              $output = Invoke-Expression "docker exec $dbContainer pg_isready -U $env:POSTGRES_USER -d $env:POSTGRES_DB"
              if ($output -match "accepting connections") {
                  Write-Output "Postgres is ready!"
                  exit 0
              }
              Write-Output "Waiting..."
              Start-Sleep -Seconds 2
          }
          Write-Output "Postgres did not become ready in time!"
          exit 1
        shell: pwsh

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global JetBrains.dotCover.GlobalTool
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"danielts90_TechChallenge" /o:"danielts90" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html
          dotnet build --no-incremental
          dotnet dotcover test --dcReportType=HTML
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Run tests with coverage
        run: dotnet test --no-build --collect:"XPlat Code Coverage"

      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coveragereport

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Shutdown database
        run: docker-compose down
