name: .NET Core Build, Test, and SonarCloud Analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    strategy:
      matrix:
        configuration: [Debug]

    runs-on: ubuntu-latest

    env:
      Solution_Name: TechChallenge.sln
      Unit_Test_Project_Path: TechChallenge.Tests/TechChallenge.Tests.csproj
      Integration_Test_Project_Path: TechChallenge.Tests.Integration/TechChallenge.Tests.Integration.csproj
      Coverlet_Report_Path: coverage/coverage.info

      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: 102030
      POSTGRES_DB: testdb

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Install JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Restore the application
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Build the application
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

    - name: Set up Docker Compose
      run: |
        echo "version: '3.8'
        services:
          db:
            image: postgres:latest
            environment:
              POSTGRES_USER: ${POSTGRES_USER}
              POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
              POSTGRES_DB: ${POSTGRES_DB}
            ports:
              - '5432:5432'" > docker-compose.yml

    - name: Start database
      run: docker-compose up -d

    - name: Wait for Postgres
      run: |
        echo "Waiting for Postgres to be ready..."
        for i in {1..30}; do
          if docker exec $(docker-compose ps -q db) pg_isready -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }}; then
            echo "Postgres is ready!"
            exit 0
          fi
          echo "Waiting..."
          sleep 2
        done
        echo "Postgres did not become ready in time!"
        exit 1

    - name: Install coverlet.console
      run: dotnet tool install --global coverlet.console

    - name: Run unit tests with coverlet
      run: |
        coverlet ./TechChallenge.Tests/bin/Debug/net8.0/TechChallenge.Tests.dll \
            --target "dotnet" \
            --targetargs "test --no-build --verbosity normal" \
            -f opencover \
            -o "coverage.unit.opencover.xml"

    - name: Run integration tests with coverlet
      run: |
        coverlet ./TechChallenge.Tests.Integration/bin/Debug/net8.0/TechChallenge.Tests.Integration.dll \
            --target "dotnet" \
            --targetargs "test --no-build --verbosity normal" \
            -f opencover \
            -o "coverage.integration.opencover.xml"

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.0
      with:
        reports: cobertura.xml
        targetdir: coveragereport

    - name: Merge coverage reports
      run: |
        reportgenerator -reports:coverage.unit.opencover.xml,coverage.integration.opencover.xml -targetdir:coverage -reporttypes:opencover
    
    - name: SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet tool install --global dotnet-sonarscanner
        export PATH="$PATH:/home/runner/.dotnet/tools"
        dotnet sonarscanner begin /k:"danielts90_TechChallenge"  /o:"danielts90" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverageReportPaths=coverage/Cobertura.xml
        dotnet build
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Clean up
      if: always()
      run: docker-compose down
